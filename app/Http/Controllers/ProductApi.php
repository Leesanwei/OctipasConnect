<?php

/**
 * Octipas Connect
 * Description here. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: montpellier@octipas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;
use Illuminate\Support\Facades\Request;
use Log;
use App\User;
use App\Classes\PrestaShopWebservice;
use App\Classes\OdooWebService;
use App\Http\Providers\SenderServiceProvider;


define('DEBUG', true);											// Debug mode
define('PS_SHOP_PATH', 'http://prestashop.octipas.net/');
define('PS_WS_AUTH_KEY', 'Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7');	// Auth key (Get it in your Back Office)


class ProductApi extends Controller
{
      /**
     * Array of store Odoo addresses.
     */
    private $storeOdooAddresses = array("test" => array("url" => "http://octipos-medium.pmi9reipgn.eu-west-1.elasticbeanstalk.com", "db" => "bonne_gueule_dev", "username" => "admin", "password" => "admin")); // TEST

    /**
     * Array of store Prestashop addresses.
     */
    private $storePSAddresses = array("test"=>array("url"=>"http://prestashop.octipas.net/", "key"=>"Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7")) ;

    /**
     * Constructor
     */
    public function __construct()
    {
   
    }
/**
     * Operation getAllPrestaProduct
     *
     * Get all Presta Products.
     *
     *
     * @return Http response
     */
    public function getAllPrestaProduct($storeId)
    {
       // $input = Request::all();

        
       // return response('How about implementing addProduct as a POST method ?');
        try
        {
            $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);

            $opt['resource'] = 'products';
              $opt['id']=12;
            // Call
            $xml = $webService->get($opt);

            // Here we get the elements from children of customer markup which is children of prestashop root markup
            $resources = $xml->children()->children();

            echo $resources;
/*
            $email = 'test@test.com';
            $optUser = array(
                'resource'       => 'customers',
                'filter[email]'  => '['.$email.']',
                'display' => '[email,lastname,firstname,passwd]'
            );
            
            
            $resultUser = ($webService->get( $optUser ));
            $userResult = json_encode($resultUser);
            $result = strpos($userResult, $email);
            echo $userResult;

            if(!$result){
                echo 'False';
            }
            else{
                echo $result;
            }
            */
            
        }
        catch (PrestaShopWebserviceException $e)
        {
            // Here we are dealing with errors
            $trace = $e->getTrace();
            if ($trace[0]['args'][0] == 404) echo 'Bad ID';
            else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
            else echo 'Other error';
        }
        //path params validation


        //not path params validation
    }


    /**
     * Operation addProduct
     *
     * Add a new product to Odoo or Prestashop.
     *
     *
     * @return Http response
     */
    public function addProduct($source, $store_id)
    {
        $input = Request::all();

        \Log::info(print_r($input,true));


        //Source from Odoo, so add a product at Prestashop
        if($source == 'odoo'){
        try
    {
	$webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
	$opt = array('resource' => 'products');
	//if (isset($_GET['Create']))
		//$xml = $webService->get(array('url' => PS_SHOP_PATH.'/api/products?schema=blank'));
	//else
		//$xml = $webService->get($opt);
                
            $name           = $input['name'];
            $price          = $input['list_price'];    
            $cost           = $input['standard_price'];
            $reference      = $input['default_code'];
            $description    = $input['description_sale'];
            $categorie      = $input['categ_id'];
            $tax            = $input['taxes_id'][13];
            $imagebase64    = $input['image'];
            if($input['purchase_ok']){
                $status = 1 ;
            }
            
$psXML = <<<XML
<prestashop>
<product>
        <id></id>
        <id_manufacturer></id_manufacturer>
        <id_supplier></id_supplier>
        <id_category_default>3</id_category_default>
        <new></new>
        <cache_default_attribute></cache_default_attribute>
        <id_default_image></id_default_image>
        <id_default_combination></id_default_combination>
        <id_tax_rules_group>$tax</id_tax_rules_group>
        <type></type>
        <id_shop_default></id_shop_default>
        <reference>$reference</reference>
        <supplier_reference></supplier_reference>
        <location></location>
        <width></width>
        <height></height>
        <depth></depth>
        <weight></weight>
        <quantity_discount></quantity_discount>
        <ean13></ean13>
        <upc></upc>
        <cache_is_pack></cache_is_pack>
        <cache_has_attachments></cache_has_attachments>
        <is_virtual></is_virtual>
        <on_sale></on_sale>
        <online_only></online_only>
        <ecotax></ecotax>
        <minimal_quantity></minimal_quantity>
        <price>$price</price>
        <wholesale_price>$cost</wholesale_price>
        <unity></unity>
        <unit_price_ratio></unit_price_ratio>
        <additional_shipping_cost></additional_shipping_cost>
        <customizable></customizable>
        <text_fields></text_fields>
        <uploadable_files></uploadable_files>
        <active>$status</active>
        <redirect_type></redirect_type>
        <id_product_redirected></id_product_redirected>
        <available_for_order>$status</available_for_order>
        <available_date></available_date>
        <condition></condition>
        <show_price>1</show_price>
        <indexed></indexed>
        <visibility></visibility>
        <advanced_stock_management></advanced_stock_management>
        <date_add></date_add>
        <date_upd></date_upd>
        <meta_description><language id='1'></language><language id='2'></language></meta_description>
        <meta_keywords><language id='1'></language><language id='2'></language></meta_keywords>
        <meta_title><language id='1'></language><language id='2'></language></meta_title>
        <link_rewrite><language id='1'>$name</language><language id='2'>$name</language></link_rewrite>
        <name><language id='1'>$name</language><language id='2'>$name</language></name>
        <description><language id='1'>$description</language><language id='2'>$description</language></description>
        <description_short><language id='1'>$description</language><language id='2'>$description</language></description_short>
        <available_now><language id='1'></language><language id='2'></language></available_now>
        <available_later><language id='1'></language><language id='2'></language></available_later>
<associations>
<categories>
        <category>
        <id>3</id>
        </category>
</categories>
<images>
        <image>
        <id></id>
        </image>
</images>
<combinations>
        <combinations>
        <id></id>
        </combinations>
</combinations>
<product_option_values>
        <product_options_values>
        <id></id>
        </product_options_values>
</product_option_values>
<product_features>
        <product_feature>
        <id></id>
        <custom></custom>
        <id_feature_value></id_feature_value>
        </product_feature>
</product_features>
<tags>
        <tag>
        <id></id>
        </tag>
</tags>
<stock_availables>
        <stock_available>
        <id></id>
        <id_product_attribute></id_product_attribute>
        </stock_available>
</stock_availables>
<accessories>
        <product>
        <id></id>
        </product>
</accessories>
<product_bundle>
        <products>
        <id></id>
        <quantity></quantity>
        </products>
</product_bundle>
</associations>
</product>
</prestashop>
XML;

        $xml = new \SimpleXMLElement($psXML);
        $opt = array( 'resource' => 'products' );
        $opt['postXml'] = $xml->asXML();
        $xml = $webService->add( $opt );
        $id = $xml->product->id;   
        echo "Sucessfully added product with product ID = $id";

        //Envoie image Ã  prestashop
        if($imagebase64 != ''){
            $output_file= realpath('../app/Images/images.png');
            $ifp = fopen( $output_file, 'wb' ); 
            $data = explode( ',', $imagebase64 );
            fwrite( $ifp, base64_decode( $data[ 0 ] ) );

            fclose( $ifp ); 
            
            $url = $this->storePSAddresses['test']['url']; 
            $key = $this->storePSAddresses['test']['key'];
            $url = $url.'/api/images/products/'.$id;
            $ch = curl_init();


            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, true);
            //curl_setopt($ch, CURLOPT_PUT, true); To edit a picture

            curl_setopt($ch, CURLOPT_USERPWD, '100NEYF7OSUSTHFCYC11DGBASLDPJ8DR');
            curl_setopt($ch, CURLOPT_POSTFIELDS, array('image'=> new \CurlFile($output_file)));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FAILONERROR, true);
            $result = curl_exec($ch);
            curl_close($ch);
        }





}
catch (PrestaShopWebserviceException $e)
{
	// Here we are dealing with errors
	$trace = $e->getTrace();
	if ($trace[0]['args'][0] == 404) echo 'Bad ID';
	else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
	else echo 'Other error';
}
        }

        //Source from Prestashop, so add a product at Odoo 
        else if($source == 'ps'){
            //$input
           
           // $data = array(array('name' => 'POSTMANTEST',
            //'type' => 'product'));
     
            $data = array();

            foreach ($input['product'] as $key => $value) {
                if(is_array($value)){
                    if($key == 'name'){
                    $data[$key] = $value[1];
                    }
                }
                else if($key == 'reference'){

                    $data['default_code'] = $value;

                }
                else{
                    //$data[$key] = $value;
                }

            }
            $data['type'] = 'product';
            $data['prestashop'] = true;
            \Log::info(print_r($data,true));
            $odooData = $this->storeOdooAddresses[$store_id];
            $url      = $odooData["url"];
            $db       = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];

           // $data = array(array('name' => $input['product']['name']['1'],
           // 'type' => 'product'));
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'create',
            'product.template');
            /*
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'create',
            'product.attribute.line');
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'create',
            'product.attribute.value');
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'create',
            'product.product');
            */
        }

    }
    /**
     * Operation updatePrestaProduct
     *
     * Update an existing product in Prestashop.
     *
     *
     * @return Http response
     */
    public function updateProduct($source, $store_id)
    {
        $input = Request::all();

        \Log::info(print_r($input,true));

    if($source== 'odoo'){
    try{
        $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);

            $name           = $input['name'];
            $price          = $input['list_price'];    
            $cost           = $input['standard_price'];
            $reference      = $input['default_code'];
            $description    = $input['description_sale'];
            $categorie      = $input['categ_id'];
            $tax            = $input['taxes_id'][1];

            

            if($input['purchase_ok']){
                $status = 1 ;
            }
            


       
	        $optUser = array(
		                'resource'       => 'products',
		                'filter[reference]'  => '['.$reference.']',
		                'display' => '[id,name,reference,id_default_image]'
	        );
	
	
	$resultUser = ($webService->get( $optUser ));
	$userResult = json_encode($resultUser);
	$json = json_decode($userResult, true);
    $id = $json['products']['product']['id'];

    if (array_key_exists('image',$input)){
        $imagebase64    = $input['image'];
        $idImage ='';
        }
        else{
    $idImage = $json['products']['product']['id_default_image'];
    $imagebase64 = '';
        }

        if(is_array($idImage)){
            $idImage='';
        }
    echo $id;
    \Log::info(print_r($idImage,true));
                    
                
    
$psXML = <<<XML
<prestashop>
<product>
            <id>$id</id>
            <id_manufacturer></id_manufacturer>
            <id_supplier></id_supplier>
            <id_category_default>3</id_category_default>
            <new></new>
            <cache_default_attribute></cache_default_attribute>
            <id_default_image>$idImage</id_default_image>
            <id_default_combination></id_default_combination>
            <id_tax_rules_group>$tax</id_tax_rules_group>
            <type></type>
            <id_shop_default></id_shop_default>
            <reference>$reference</reference>
            <supplier_reference></supplier_reference>
            <location></location>
            <width></width>
            <height></height>
            <depth></depth>
            <weight></weight>
            <quantity_discount></quantity_discount>
            <ean13></ean13>
            <upc></upc>
            <cache_is_pack></cache_is_pack>
            <cache_has_attachments></cache_has_attachments>
            <is_virtual></is_virtual>
            <on_sale></on_sale>
            <online_only></online_only>
            <ecotax></ecotax>
            <minimal_quantity></minimal_quantity>
            <price>$price</price>
            <wholesale_price>$cost</wholesale_price>
            <unity></unity>
            <unit_price_ratio></unit_price_ratio>
            <additional_shipping_cost></additional_shipping_cost>
            <customizable></customizable>
            <text_fields></text_fields>
            <uploadable_files></uploadable_files>
            <active>$status</active>
            <redirect_type></redirect_type>
            <id_product_redirected></id_product_redirected>
            <available_for_order>$status</available_for_order>
            <available_date></available_date>
            <condition></condition>
            <show_price>1</show_price>
            <indexed></indexed>
            <visibility></visibility>
            <advanced_stock_management></advanced_stock_management>
            <date_add></date_add>
            <date_upd></date_upd>
            <meta_description><language id='1'></language><language id='2'></language></meta_description>
            <meta_keywords><language id='1'></language><language id='2'></language></meta_keywords>
            <meta_title><language id='1'></language><language id='2'></language></meta_title>
            <link_rewrite><language id='1'>$name</language><language id='2'>$name</language></link_rewrite>
            <name><language id='1'>$name</language><language id='2'>$name</language></name>
            <description><language id='1'>$description</language><language id='2'>$description</language></description>
            <description_short><language id='1'>$description</language><language id='2'>$description</language></description_short>
            <available_now><language id='1'></language><language id='2'></language></available_now>
            <available_later><language id='1'></language><language id='2'></language></available_later>
<associations>
<categories>
            <category>
            <id>3</id>
            </category>
</categories>
<images>
        <image>
            <id></id>
            </image>
</images>
<combinations>
            <combinations>
            <id></id>
            </combinations>
</combinations>
<product_option_values>
            <product_options_values>
            <id></id>
            </product_options_values>
</product_option_values>
<product_features>
            <product_feature>
            <id></id>
            <custom></custom>
            <id_feature_value></id_feature_value>
            </product_feature>
</product_features>
<tags>
            <tag>
            <id></id>
            </tag>
</tags>
<stock_availables>
            <stock_available>
            <id></id>
            <id_product_attribute></id_product_attribute>
            </stock_available>
</stock_availables>
<accessories>
            <product>
            <id></id>
            </product>
</accessories>
<product_bundle>
            <products>
            <id></id>
            <quantity></quantity>
            </products>
</product_bundle>
</associations>
</product>
</prestashop>
XML;
    
    $xml = new \SimpleXMLElement($psXML);
    $opt = array( 'resource' => 'products' );
    $opt['putXml'] = $xml->asXML();
    $opt['id'] = $id;
    $xml = $webService->edit( $opt );
    $id_prod = $xml->product->id;   
            echo "Sucessfully updated product with product ID = $id_prod";

            if($imagebase64 != ''){
                \Log::info('Should not come here');
                $output_file= realpath('../app/Images/images.png');
                $ifp = fopen( $output_file, 'wb' ); 
                $data = explode( ',', $imagebase64 );
                fwrite( $ifp, base64_decode( $data[ 0 ] ) );
    
                fclose( $ifp ); 
                $url = $this->storePSAddresses['test']['url']; 
                $key = $this->storePSAddresses['test']['key'];
                $url = $url.'/api/images/products/'.$id;

              
                $ch = curl_init();
    
    
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, true);
                //curl_setopt($ch, CURLOPT_PUT, true); To edit a picture
    
                curl_setopt($ch, CURLOPT_USERPWD, '100NEYF7OSUSTHFCYC11DGBASLDPJ8DR');
                curl_setopt($ch, CURLOPT_POSTFIELDS, array('image'=> new \CurlFile($output_file)));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_FAILONERROR, true);
                $result = curl_exec($ch);
                curl_close($ch);
            }

}
    catch (PrestaShopWebserviceException $e)
    {
        // Here we are dealing with errors
        $trace = $e->getTrace();
        if ($trace[0]['args'][0] == 404) echo 'Bad ID';
        else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
        else echo 'Other error';
    }
}
else if($source == 'ps'){

    $data = array();


            foreach ($input['product'] as $key => $value) {
                if(is_array($value)){
                    if($key == 'name'){
                    $data[$key] = $value[1];
                    }
                }
                else if($key == 'reference'){

                    $data['default_code'] = $value;
                    $data['condition1'] = $value;
                }
                else{

                   // $data[$key] = $value;

                }

            }
            $data['type'] = 'product';
            $data['condition'] = 'default_code';
            $data['prestashop'] = true;
            
            $odooData = $this->storeOdooAddresses[$store_id];
            $url = $odooData["url"];
            $db = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];

    
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'write',
            'product.template');


}
    }
    /**
     * Operation deletePrestaProduct
     *
     * Deletes a product in prestashop.
     *
     * @param int $product_id Product id to delete (required)
     *
     * @return Http response
     */
    public function deleteProduct($source,$store_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if($source == 'odoo'){
            $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
            $reference      = $input['default_code'];
        

	        $optUser = array(
		                'resource'       => 'products',
		                'filter[reference]'  => '['.$reference.']',
		                'display' => '[id,name,reference]'
	        );
	
	
	$resultUser = ($webService->get( $optUser ));
	$userResult = json_encode($resultUser);
	$json = json_decode($userResult, true);
	$id = $json['products']['product']['id'];
    echo $id;


            try
            {
                $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
                    // Call for a deletion, we specify the resource name and the id of the resource in order to delete the item
                    $webService->delete(array('resource' => 'products', 'id' => intval($id)));
                    // If there's an error we throw an exception
                
                    echo 'Successfully deleted !';
                    return response()->json($id, 200);
                
               
            }
            catch (PrestaShopWebserviceException $e)
            {
                // Here we are dealing with errors
                $trace = $e->getTrace();
                if ($trace[0]['args'][0] == 404) echo 'Bad ID';
                else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
                else echo 'Other error';
            }


        }
        else if($source == 'ps')
        {
            //$debug = print_r($input['product'],true);

        $odooData = $this->storeOdooAddresses[$store_id];
            $url = $odooData["url"];
            $db = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];
  
        $data['condition']= 'default_code';
        $data['condition1']=$input['product']['reference'];
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'unlink',
            'product.template');

        }
       
    }
    /**
     * Operation getProductById
     *
     * Find product by ID.
     *
     * @param int $product_id ID of product to return (required)
     *
     * @return Http response
     */
    public function getProductById($product_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getProductById as a GET method ?');
    }
    /**
     * Operation updateProductWithForm
     *
     * Updates a product in the store with form data.
     *
     * @param int $product_id ID of product that needs to be updated (required)
     *
     * @return Http response
     */
    public function updateProductWithForm($product_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateProductWithForm as a POST method ?');
    }
    /**
     * Operation uploadProductFile
     *
     * uploads an image.
     *
     * @param int $product_id ID of product to update (required)
     *
     * @return Http response
     */
    public function uploadProductFile($product_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing uploadProductFile as a POST method ?');
    }
}
