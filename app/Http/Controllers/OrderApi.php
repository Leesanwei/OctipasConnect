<?php

/**
 * Octipas Connect
 * Description here. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: montpellier@octipas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;
use Illuminate\Support\Facades\Request;
use Log;
use App\User;
use App\Classes\PrestaShopWebservice;
use App\Classes\OdooWebService;
use App\Http\Providers\SenderServiceProvider;


define('DEBUG', true);											// Debug mode
define('PS_SHOP_PATH', 'http://prestashop.octipas.net/');
define('PS_WS_AUTH_KEY', 'Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7');	// Auth key (Get it in your Back Office)


class OrderApi extends Controller
{

      /**
     * Array of store Odoo addresses.
     */
    private $storeOdooAddresses = array("test" => array("url" => "http://octipos-medium.pmi9reipgn.eu-west-1.elasticbeanstalk.com", "db" => "bonne_gueule_dev", "username" => "admin", "password" => "admin")); // TEST

    /**
     * Array of store Prestashop addresses.
     */
    private $storePSAddresses = array("test"=>array("url"=>"http://prestashop.octipas.net/", "key"=>"Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7")) ;

    /**
     * Constructor
     */
    public function __construct()
    {
   
    }

    /**
     * Operation addOrder
     *
     * Add a new order to Odoo or Prestashop.
     *
     *
     * @return Http response
     */
    public function addOrder($source, $store_id)
    {
        $input = Request::all();
        $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);


        //Source from Odoo, so add an order at Prestashop
        if($source == 'odoo'){
            \Log::info("add Order here");
            \Log::info(print_r($input,true));

            //Get email from Odoo with given id
            $data['id'] = $input['partner_id'];
            $data['filter'] = 'email';
        
            $odooData = $this->storeOdooAddresses[$store_id];
            $url      = $odooData["url"];
            $db       = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];

           //Get reference code at Odoo
           $result =  SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'read',
            'res.partner');

            \Log::info(print_r($result,true));

            $email = $result->val->me['array'][0]->me['struct']['email']->me['string'];
            
            $data['id'] = $input['product_id'];
            $data['filter'] = 'default_code';

            $result =  SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'read',
            'product.product');

            \Log::info(print_r($result,true));

            $defaultCode = $result->val->me['array'][0]->me['struct']['default_code']->me['string'];
            

        try
    {
        //get idCustomer
                $optUser = array(
                    'resource'       => 'customers',
                    'filter[email]'  => '['.$email.']',
                    'display' => '[id,email,id_lang]'
        );


            $resultUser = ($webService->get( $optUser ));
            $userResult = json_encode($resultUser);
            $json = json_decode($userResult, true);

            $idCustomer = $json['customers']['customer']['id'];
            $idLang =  $json['customers']['customer']['id_lang'];
            \Log::info($idCustomer);

            //get idProduct
            $optUser = array(
                'resource'       => 'products',
                'filter[reference]'  => '['.$defaultCode.']',
                'display' => '[id,reference, id_default_combination]'
    );


        $resultUser = ($webService->get( $optUser ));
        $userResult = json_encode($resultUser);
        $json = json_decode($userResult, true);

        $idProduct = $json['products']['product']['id'];
        \Log::info($idProduct);

        //get idAddress
        $optUser = array(
            'resource'       => 'addresses',
            'filter[id_customer]'  => '['.$idCustomer.']',
            'display' => '[id]'
);


    $resultUser = ($webService->get( $optUser ));
    $userResult = json_encode($resultUser);
    $json = json_decode($userResult, true);

    \Log::info(print_r($json,true));
    if(is_array($json['addresses']['address'])){
        $idAddress = $json['addresses']['address'][0]['id'];
    }else{
        $idAddress = $json['addresses']['address']['id'];
    }
    
    \Log::info($idAddress);



\Log::info(print_r($json,true));
                
            $price =$input['price_unit'];  
            $paid  = $price*1.2;
            $quantity = $input['qty']; 


$psXML = <<<XML
<prestashop>
<cart>
	<id></id>
	<id_address_delivery></id_address_delivery>
	<id_address_invoice></id_address_invoice>
	<id_currency>1</id_currency>
	<id_customer>$idCustomer</id_customer>
	<id_guest></id_guest>
	<id_lang>$idLang</id_lang>
	<id_shop_group></id_shop_group>
	<id_shop></id_shop>
	<id_carrier></id_carrier>
	<recyclable></recyclable>
	<gift></gift>
	<gift_message></gift_message>
	<mobile_theme></mobile_theme>
	<delivery_option></delivery_option>
	<secure_key></secure_key>
	<allow_seperated_package></allow_seperated_package>
	<date_add></date_add>
	<date_upd></date_upd>
<associations>
<cart_rows>
	<cart_row>
	<id_product>$idProduct</id_product>
	<id_product_attribute></id_product_attribute>
	<id_address_delivery></id_address_delivery>
	<quantity>$quantity</quantity>
	</cart_row>
</cart_rows>
</associations>
</cart>
</prestashop>
XML;

            $xml = new \SimpleXMLElement($psXML);
            $opt = array( 'resource' => 'carts' );
            $opt['postXml'] = $xml->asXML();
            $xml = $webService->add( $opt );
            $id_cart = $xml->cart->id;   
            echo "Successfully added.";
            echo "ID cart = $id_cart ";
            \Log::info(print_r($id_cart,true));
        
            $payment = 'Ch√®que';
            $module = 'cheque';
            $psXML1 = <<<XML
            <prestashop>
            <order>
                <id></id>
                <id_address_delivery>$idAddress</id_address_delivery>
                <id_address_invoice>$idAddress</id_address_invoice>
                <id_cart>$id_cart[0]</id_cart>
                <id_currency>1</id_currency>
                <id_lang>$idLang</id_lang>
                <id_customer>$idCustomer</id_customer>
                <id_carrier>1</id_carrier>
                <current_state></current_state>
                <module>$module</module>
                <invoice_number></invoice_number>
                <invoice_date></invoice_date>
                <delivery_number></delivery_number>
                <delivery_date></delivery_date>
                <valid>1</valid>
                <date_add></date_add>
                <date_upd></date_upd>
                <id_shop_group></id_shop_group>
                <id_shop></id_shop>
                <secure_key></secure_key>
                <payment>$payment</payment>
                <recyclable></recyclable>
                <gift></gift>
                <gift_message></gift_message>
                <mobile_theme></mobile_theme>
                <total_discounts></total_discounts>
                <total_discounts_tax_incl></total_discounts_tax_incl>
                <total_discounts_tax_excl></total_discounts_tax_excl>
                <total_paid>$paid </total_paid>
                <total_paid_tax_incl>$paid </total_paid_tax_incl>
                <total_paid_tax_excl>$paid</total_paid_tax_excl>
                <total_paid_real>$paid</total_paid_real>
                <total_products>$paid</total_products>
                <total_products_wt>$paid</total_products_wt>
                <total_shipping></total_shipping>
                <total_shipping_tax_incl></total_shipping_tax_incl>
                <total_shipping_tax_excl></total_shipping_tax_excl>
                <carrier_tax_rate></carrier_tax_rate>
                <total_wrapping></total_wrapping>
                <total_wrapping_tax_incl></total_wrapping_tax_incl>
                <total_wrapping_tax_excl></total_wrapping_tax_excl>
                <shipping_number></shipping_number>
                <conversion_rate>1</conversion_rate>
                <reference></reference>
            <associations>
            <order_rows>
                <order_row>
                <id></id>
                <product_id>$idProduct</product_id>
                <product_attribute_id></product_attribute_id>
                <product_quantity>$quantity</product_quantity>
                <product_name></product_name>
                <product_price>$paid</product_price>
                <unit_price_tax_incl>$paid</unit_price_tax_incl>
                <unit_price_tax_excl>$paid</unit_price_tax_excl>
                </order_row>
            </order_rows>
            </associations>
            </order>
            </prestashop>
XML;

     // Creating the order
     $xml1 = new \SimpleXMLElement($psXML1);
     $opt = array( 'resource' => 'orders' );
     $opt['postXml'] = $xml1->asXML();
     $xml1 = $webService->add( $opt );
     $id_order = $xml1->order->id;   
     echo "Sucessfully added order with order ID = $id_order";
     echo "Customer: ".$id_customer." address: ".$id_address." cart: ".$id_cart." Order: .".$id_order;

}
catch (PrestaShopWebserviceException $e)
{
	// Here we are dealing with errors
	$trace = $e->getTrace();
	if ($trace[0]['args'][0] == 404) echo 'Bad ID';
	else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
	else echo 'Other error';
}
        }

        //Source from Prestashop, so add a product at Odoo 
        else if($source == 'ps'){
            //Get customer email from prestashop
            $data = array();
            $data['condition'] = 'email';
            $data['condition1'] = $input['customer']['email'];

            
            $odooData = $this->storeOdooAddresses[$store_id];
            $url = $odooData["url"];
            $db = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];
            $idCustomer = SenderServiceProvider::getIdFromOdoo($url, $db, $username, $password,$data,'res.partner');

            unset($data);
            $data = array();

            $data['partner_id']= $idCustomer;
            $data['pos_reference'] = $input['order']['reference'];
            $data['prestashop'] =true;
            $idOrder = SenderServiceProvider::sendToOdoo($url, $db, $username, $password, $data, 
            'create',
            'pos.order');
            
            $idOrder = $idOrder->val->me['int']; 
            

            foreach ($input['order']['product_list'] as $value) {
               
                unset($data);
                $data = array();
                $data['condition'] = 'default_code';
                $data['condition1'] = $value['reference'];
                \Log::info($value['reference']);
                $idProduct= SenderServiceProvider::getIdFromOdoo($url, $db, $username, $password, $data,'product.product');

                \Log::info($idProduct);
                unset($data);
                $data = array();
                $data['order_id'] = $idOrder;
                $data['qty'] = $value['cart_quantity'];
                $data['product_id'] = $idProduct;
                $data['price_unit']= $value['price']; //not sure if price or total
                $data['prestashop'] =true;
                //$data['tax_ids'] = [[6, False, [1]]];
                $idOrderLine = SenderServiceProvider::sendToOdoo($url, $db, $username, $password, $data, 
            'create',
            'pos.order.line');
                

            }
            
            unset($data);
                $data = array();
                

                $idAdresseLivraison = $input['cart']['id_address_delivery'];
                $optUser = array(
                    'resource'       => 'addresses',
                    'filter[id]'  => '['.$idAdresseLivraison.']',
                    'display' => '[id,lastname,firstname,address1,address2,postcode,city]'
        );


    $resultUser = ($webService->get( $optUser ));
    $userResult = json_encode($resultUser);
    $json = json_decode($userResult, true);
 
    $adresseLivraison = $json['addresses']['address']['firstname'].' '.$json['addresses']['address']['lastname'].' '.$json['addresses']['address']['address1'].' '.$json['addresses']['address']['postcode'].' '.$json['addresses']['address']['city'] ;
      

                $idAdresseFacturation = $input['cart']['id_address_invoice'];
                $optUser = array(
                    'resource'       => 'addresses',
                    'filter[id]'  => '['.$idAdresseFacturation.']',
                    'display' => '[id,lastname,firstname,address1,address2,postcode,city]'
        );
        $resultUser = ($webService->get( $optUser ));
        $userResult = json_encode($resultUser);
        $json = json_decode($userResult, true);
        
        $adresseFacturation = $json['addresses']['address']['firstname'].' '.$json['addresses']['address']['lastname'].' '.$json['addresses']['address']['address1'].' '.$json['addresses']['address']['postcode'].' '.$json['addresses']['address']['city'] ;
     

        $idCarrier = $input['cart']['id_carrier'];
                $optUser = array(
                    'resource'       => 'carriers',
                    'filter[id]'  => '['.$idCarrier.']',
                    'display' => '[id,name]'
        );
        $resultUser = ($webService->get( $optUser ));
        $userResult = json_encode($resultUser);
        $json = json_decode($userResult, true);
        
        $shippingMethod = $json['carriers']['carrier']['name'];
       

                $data['order_id'] = $idOrder;
                $data['customer_id']= $idCustomer;
                $data['adresse_de_livraison']= $adresseLivraison;
                $data['adresse_de_facturation']= $adresseFacturation;
                $data['shipping_method']= $shippingMethod;
                $data['shipping_price']= $input['order']['total_shipping'];
           

            $idOrderLine = SenderServiceProvider::sendToOdoo($url, $db, $username, $password, $data, 
            'create',
            'pos.order.web');
           // $data = array(array('name' => $input['product']['name']['1'],
           // 'type' => 'product'));




        }

    }


    /**
     * Operation updateOrder
     *
     * Add a new order to Odoo or Prestashop.
     *
     *
     * @return Http response
     */
    public function updateOrder($source, $store_id)
    {
        $input = Request::all();

        $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
       

        //Source from Odoo, so add a product at Prestashop
        if($source == 'odoo'){
            try
            {

               


            $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
            $opt = array('resource' => 'products');
            //if (isset($_GET['Create']))
                $xml = $webService->get(array('url' => PS_SHOP_PATH.'/api/carts?schema=blank'));
            //else
                //$xml = $webService->get($opt);
                        
                    $price =1234;    
        
        $psXML = <<<XML
        <prestashop>
        <cart>
            <id></id>
            <id_address_delivery></id_address_delivery>
            <id_address_invoice></id_address_invoice>
            <id_currency></id_currency>
            <id_customer></id_customer>
            <id_guest></id_guest>
            <id_lang></id_lang>
            <id_shop_group></id_shop_group>
            <id_shop></id_shop>
            <id_carrier></id_carrier>
            <recyclable></recyclable>
            <gift></gift>
            <gift_message></gift_message>
            <mobile_theme></mobile_theme>
            <delivery_option></delivery_option>
            <secure_key></secure_key>
            <allow_seperated_package></allow_seperated_package>
            <date_add></date_add>
            <date_upd></date_upd>
        <associations>
        <cart_rows>
            <cart_row>
            <id_product></id_product>
            <id_product_attribute></id_product_attribute>
            <id_address_delivery></id_address_delivery>
            <quantity></quantity>
            </cart_row>
        </cart_rows>
        </associations>
        </cart>
        </prestashop>
XML;
        
        $xml = new \SimpleXMLElement($psXML);
        $opt = array( 'resource' => 'carts' );
        $opt['putXml'] = $xml->asXML();
        $opt['id'] = $id;
        $xml = $webService->edit( $opt );
        $id_prod = $xml->order->id;   
                echo "Sucessfully updated order with order ID = $id_prod";
        }
        catch (PrestaShopWebserviceException $e)
        {
            // Here we are dealing with errors
            $trace = $e->getTrace();
            if ($trace[0]['args'][0] == 404) echo 'Bad ID';
            else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
            else echo 'Other error';
        }


        }
        else if($source =='ps'){
            $idOrder = $input['id_order'];
            $optUser = array(
                'resource'       => 'orders',
                'filter[id]'  => '['.$idOrder.']',
                'display' => '[id,reference]'
            );
            $resultUser = ($webService->get( $optUser ));
            $userResult = json_encode($resultUser);
            $json = json_decode($userResult, true);
            
            $orderReference = $json['orders']['order']['reference'];
            
            unset($data);
            $data = array();
            $data['condition'] = 'pos_reference';
            $data['condition1'] = $orderReference;
            $data['prestashop'] =true;
            if($input['newOrderStatus']['paid']== 1){
                $data['state']= 'paid';

            }

            $odooData = $this->storeOdooAddresses[$store_id];
            $url = $odooData["url"];
            $db = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];

    
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'write',
            'pos.order');

        }


    }




}

?>