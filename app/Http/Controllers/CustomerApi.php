<?php

/**
 * Octipas Connect
 * Description here.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: montpellier@octipas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace App\Http\Controllers;

use App\Http\Providers\SenderServiceProvider;
use Exception;
use Illuminate\Support\Facades\Request;

class CustomerApi extends Controller
{
     /**
     * Array of store Odoo addresses.
     */
    private $storeOdooAddresses = array("test" => array("url" => "http://octipos-medium.pmi9reipgn.eu-west-1.elasticbeanstalk.com", "db" => "bonne_gueule_dev", "username" => "admin", "password" => "admin")); // TEST

    /**
     * Array of store Prestashop addresses.
     */
    private $storePSAddresses = array("test"=>array("url"=>"http://prestashop.octipas.net/", "key"=>"Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7")) ;

    /**
     * Constructor
     */
    public function __construct()
    {
        // TODO : load dynamically addresses with loadAddresses() function
        // $this->loadAddresses();
    }

    /**
     * Load store odoo and prestashop addresses from file or database.
     */
    private function loadAddresses()
    {
        // TODO : load addresses from db or file
    }

    /**
     * Operation addCustomer
     *
     * Add a new customer.
     *
     * @param string $source Request source (ps or odoo)
     * @param string $store_id Store identifier (required)
     *
     * @return Http response
     */
    public function addCustomer($source, $store_id)
    {
        $input = Request::all();

        

        // Argument verification

        if (!isset($input['email'])) {
            throw new \InvalidArgumentException('Missing the required parameter "email" when calling addCustomer');
        }

     

        if ($source == "ps") {
            $data = array(
                'customer' => true,
                'title' => ($input['id_gender'] == '1') ? 3 : 1,
                'name' => $input['firstname'] . " " . $input['lastname'],
                'email' => $input['email'],
            );
            $odoo = $this->storeOdooAddresses[$store_id];
            SenderServiceProvider::sendToOdoo($odoo["url"], $odoo["db"], $odoo["username"], $odoo["password"], $data, "create", "res.partner");
            
            return response('Sent to Odoo !');

        } else if ($source == "odoo") {
            $data = array(
                'id_gender' => ($input['title'] == '1') ? 3 : 1,
            );
            !isset($input['street']) ? $data['address'] = $input['street'] : $data['address'] = '';
            $name = explode(' ', $input['name']);
            $data['firstname'] = $name[0];
            $data['lastname'] = '';
            for ($i = 1; $i < count($name); $i++) {
                $data['lastname'] = $data['lastname'] . ' ' . $name[$i];
            }
            $data['email'] = $input['email'];
            $data['prestashop'] = "true" ;
            $ps = $this->storePSAddresses[$store_id];
            if (SenderServiceProvider::sendToPS($ps["url"], $ps["key"], "customer", $data, "GET") == null) {
                
                $response = SenderServiceProvider::sendToPS($ps["url"], $ps["key"], "customer", $data, "POST");
            } else {
                throw new Exception('A Customer already exists with this email');
            }
            
            return response()->json($response);
        } else {
            return response('Error !');
        }
    }
    /**
     * Operation updateOdooCustomer
     *
     * Update an existing customer.
     *
     * @param string $source Request source (ps or odoo)
     * @param int $store_id Store identifier (required)
     *
     * @return Http response
     */
    public function updateCustomer($source, $store_id)
    {
        $input = Request::all();
        //print_r($input); //TEST

        

        //path params validation

        //not path params validation
        if (!isset($input['email'])) {
            throw new \InvalidArgumentException('Missing the required parameter "email" when calling updateCustomer');
        }

        

        if ($source == "ps") {
            $data = array();
            $debug = print_r($input, true);
            

            $data = array(
                'customer' => true,
                'title' => ($input['id_gender'] == '1') ? 3 : 1,
                'name' => $input['firstname'] . " " . $input['lastname'],
                'email' => $input['email'],
            );

            // delete customer by email from odoo
            $data['condition'] = 'email';
            $data['condition1'] = $input['email'];
            $data['prestashop'] = "true" ;
            $odoo = $this->storeOdooAddresses[$store_id];
            SenderServiceProvider::sendToOdoo($odoo["url"], $odoo["db"], $odoo["username"], $odoo["password"], $data, 'write', 'res.partner');
            
            return response('Sent to Odoo !');
        } else if ($source == "odoo") {
            $data = array(
                'id_gender' => ($input['title'] == '1') ? 3 : 1,
                'address' => $input['street'],
            );
            $name = explode(' ', $input['name']);
            $data['firstname'] = $name[0];
            $data['lastname'] = '';
            for ($i = 1; $i < count($name); $i++) {
                $data['lastname'] = $data['lastname'] . ' ' . $name[$i];
            }
            if ($input['email'] != 'False') {
                $data['email'] = $input['email'];
            } else {
                $data['email'] = "no.mail@mail.com";
            }
            $ps = $this->storePSAddresses[$store_id];
            if (SenderServiceProvider::sendToPS($ps["url"], $ps["key"], "customer", $data, "PUT") == null) {
                
                throw new Exeption("No Customer exists with this email");
            } else {
                
            }
            return response('Sent to Prestashop !');
        } else {
            return response('Error !');
        }
    }
    /**
     * Operation deleteCustomer
     *
     * Deletes a customer.
     *
     * @param int $store_id Store identifier (required)
     *
     * @param int $customer_id Customer id to delete (required)
     *
     * @return Http response
     */
    public function deleteCustomer($source, $store_id)
    {

        $input = Request::all();

        

        //path params validation

        //not path params validation
        if (!isset($input['email'])) {
            throw new \InvalidArgumentException('Missing the required parameter "email" when calling updateCustomer');
        }

        

        if ($source == "ps") {
            // delete customer by email from odoo
            $data['condition'] = 'email';
            $data['condition1'] = $input['email'];
            $data['prestashop'] = "true" ;

            $odoo = $this->storeOdooAddresses[$store_id];
            $url = $odoo["url"];
            $db = $odoo["db"];
            $username = $odoo["username"];
            $password = $odoo["password"];
            SenderServiceProvider::sendToOdoo($url, $db, $username, $password, $data, "unlink", "res.partner");
            return response('Sent to Odoo !');
        }

        if ($source == "odoo") {
            $ps = $this->storePSAddresses[$store_id];
            if (SenderServiceProvider::sendToPS($ps["url"], $ps["key"], "customer", $input, "DELETE") == null) {
                
                throw new Exeption("No Customer exists with this email");
            } else {
                
            }
            return response('Sent to Prestashop !');
        } else {
            return response('Error !');
        }
    }

    /**
     * Operation getCustomerByEmail
     *
     * Find customer by Email.
     *
     * @param int $customer_id Email of customer to return (required)
     *
     * @return Http response
     */
    public function getCustomerByEmail($source, $store_id, $customer_email)
    {
        //path params validation
        if ($source == "odoo") {
            $data = array();
            $data['email'] = $customer_email;
            $ps = $this->storePSAddresses[$store_id];
            $response = SenderServiceProvider::sendToPS($ps["url"], $ps["key"], "customer", $data, "POST");
            return $response;
        }

        //not path params validation

        return response('How about implementing getCustomerByEmail as a GET method ?');
    }

    /**
     * Operation getCustomerById
     *
     * Find customer by ID.
     *
     * @param int $customer_id ID of customer to return (required)
     *
     * @return Http response
     */
    public function getCustomerById($store_id, $customer_id)
    {
        $input = Request::all();

        //path params validation

        //not path params validation

        return response('How about implementing getCustomerById as a GET method ?');
    }
    /**
     * Operation updateCustomerWithForm
     *
     * Updates a customer in the store with form data.
     *
     * @param int $customer_id ID of customer that needs to be updated (required)
     *
     * @return Http response
     */
    public function updateCustomerWithForm($store_id, $customer_id)
    {
        $input = Request::all();

        //path params validation

        //not path params validation

        $this->send($this->storeOdooAddresses[$store_id] . '/customer/' . $customer_id, $input, "POST");

        return response('How about implementing updateCustomerWithForm as a POST method ?');
    }
    /**
     * Operation uploadCustomerFile
     *
     * uploads an image.
     *
     * @param int $customer_id ID of customer to update (required)
     *
     * @return Http response
     */
    public function uploadCustomerFile($store_id, $customer_id)
    {
        $input = Request::all();

        //path params validation

        //not path params validation

        return response('How about implementing uploadCustomerFile as a POST method ?');
    }
}
