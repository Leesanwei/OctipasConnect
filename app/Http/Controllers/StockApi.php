<?php
/**
 * Octipas Connect
 * Description here. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: montpellier@octipas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;
use Illuminate\Support\Facades\Request;
use Log;
use App\User;
use App\Classes\PrestaShopWebservice;
use App\Classes\OdooWebService;
use App\Http\Providers\SenderServiceProvider;


define('DEBUG', true);											// Debug mode
define('PS_SHOP_PATH', 'http://prestashop.octipas.net/');
define('PS_WS_AUTH_KEY', 'Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7');	// Auth key (Get it in your Back Office)


class StockApi extends Controller
{
       /**
     * Array of store Odoo addresses.
     */
    private $storeOdooAddresses = array("test" => array("url" => "http://octipos-medium.pmi9reipgn.eu-west-1.elasticbeanstalk.com", "db" => "bonne_gueule_dev", "username" => "admin", "password" => "admin")); // TEST

    /**
     * Array of store Prestashop addresses.
     */
    private $storePSAddresses = array("test"=>array("url"=>"http://prestashop.octipas.net/", "key"=>"Y3ASY4Q9PDTDZMAPE14TGWE4KP5KD6W7")) ;

     /**
     * Constructor
     */
    public function __construct()
    {
   
    }

    /**
     * Operation addStock
     *
     * Set Stock at Prestashop
     *
     *
     * @return Http response
     */
    public function addStock($source, $store_id)
    {
        $input = Request::all();
        \Log::info(print_r($input,true));

        if($source == 'odoo'){
            //Odoo give us product ID and quantity
            $data['id'] = $input['product_tmpl_id'];
            $data['filter'] = 'default_code';
        
            $odooData = $this->storeOdooAddresses[$store_id];
            $url      = $odooData["url"];
            $db       = $odooData["db"];
            $username = $odooData["username"];
            $password = $odooData["password"];

           //Get reference code at Odoo
           $result =  SenderServiceProvider::sendToOdoo($url, $db, $username, $password,$data, 
            'read',
            'product.template');


            $quantity = $input['new_quantity'];
            $reference = $result->val->me['array'][0]->me['struct']['default_code']->me['string'];
         

            

            //Get id at prestashop and then update stock
            try
            {
            $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
            $optUser = array(
                'resource'       => 'products',
                'filter[reference]'  => '['.$reference.']',
                'display' => '[id,name,reference,id_default_image]'
            );

            //Get product ID at prestashop by reference code
            $resultUser = ($webService->get( $optUser ));
            $userResult = json_encode($resultUser);
            $json = json_decode($userResult, true);
            $idProduct = $json['products']['product']['id'];
            \Log::info($idProduct);

            //Get Stock available ID by product ID
            $optUser = array(
                'resource'       => 'stock_availables',
                'filter[id_product]'  => '['.$idProduct.']',
                'display' => '[id,id_product,id_product_attribute,quantity,depends_on_stock,out_of_stock,id_shop]'
            );
        
        
            $resultUser = ($webService->get( $optUser ));
            $userResult = json_encode($resultUser);
            $json = json_decode($userResult, true);
            $id = $json['stock_availables']['stock_available']['id'];
            $idProdAttribute = $json['stock_availables']['stock_available']['id_product_attribute'];
            $dependsOnStock = $json['stock_availables']['stock_available']['depends_on_stock'];
            $outOfStock = $json['stock_availables']['stock_available']['out_of_stock'];
            $idShop = $json['stock_availables']['stock_available']['id_shop'];
            print_r($json);

            //Update stock at prestashop
            $psXML = <<<XML
<prestashop >
<stock_available>
	<id>$id</id>
	<id_product>$idProduct</id_product>
	<id_product_attribute>$idProdAttribute</id_product_attribute>
	<id_shop>$idShop</id_shop>
	<id_shop_group></id_shop_group>
	<quantity>$quantity</quantity>
	<depends_on_stock>$dependsOnStock</depends_on_stock>
	<out_of_stock>$outOfStock</out_of_stock>
</stock_available>
</prestashop>
XML;

                $xml = new \SimpleXMLElement($psXML);
                $opt = array( 'resource' => 'stock_availables' );
                $opt['putXml'] = $xml->asXML();
                $opt['id'] = $id;
                $xml = $webService->edit( $opt );
            }

            catch (PrestaShopWebserviceException $e)
            {
                // Here we are dealing with errors
                $trace = $e->getTrace();
                if ($trace[0]['args'][0] == 404) echo 'Bad ID';
                else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
                else echo 'Other error';
            }



        }

    }

    /**
     * Operation updateStock
     *
     * Not used for the moment
     *
     *
     * @return Http response
     */
    public function updateStock($source, $store_id)
    {
        $input = Request::all();

        \Log::info(print_r($input,true));

        /*
        if($source == 'odoo'){
        try
        {
        $webService = new PrestaShopWebservice(PS_SHOP_PATH, PS_WS_AUTH_KEY, DEBUG);
        $opt = array('resource' => 'stock_availables');
        }
        catch (PrestaShopWebserviceException $e)
        {
            // Here we are dealing with errors
            $trace = $e->getTrace();
            if ($trace[0]['args'][0] == 404) echo 'Bad ID';
            else if ($trace[0]['args'][0] == 401) echo 'Bad auth key';
            else echo 'Other error';
        }
    }
    */


    }



    /**
     * Operation deleteStock
     *
     * Delete Stock
     *
     *
     * @return Http response
     */
    public function deleteStock($source, $store_id)
    {
        $input = Request::all();

    }







}

?>